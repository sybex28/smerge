import os
import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import traceback
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_filename = f"smerge_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class AudioMerger:
    def __init__(self):
        logging.info("Initializing Audio Merger application")
        self.window = tk.Tk()
        self.window.title("Audio Merger")
        self.window.minsize(400, 300)
        self.window.resizable(True, True)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.window.withdraw()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å –Ω–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∫–Ω–æ–ø–æ–∫
        self.colors = {
            'bg': '#1e1e1e',           # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω
            'secondary_bg': '#2d2d2d',  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω
            'accent': '#6366f1',        # –ù–æ–≤—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
            'accent_hover': '#8b5cf6',  # –°–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            'secondary_accent': '#10b981', # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            'secondary_hover': '#34d399',  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            'text': '#ffffff',          # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            'text_secondary': '#b0b0b0', # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            'border': '#404040',        # –ì—Ä–∞–Ω–∏—Ü—ã
            'success': '#4caf50',       # –£—Å–ø–µ—Ö
            'error': '#f44336',         # –û—à–∏–±–∫–∞
            'warning': '#ff9800'        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        }
        
        self.selected_files = []
        self.output_path = ""
        self.merge_btn = None
        self.interface_created = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.setup_dark_theme()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏
        self.window.grid_columnconfigure(0, weight=1)
        self.window.grid_rowconfigure(0, weight=1)
        
        # –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        self.window.after(100, self.select_files)
        
    def setup_dark_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        self.window.configure(bg=self.colors['bg'])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è ttk –≤–∏–¥–∂–µ—Ç–æ–≤
        self.style = ttk.Style()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        self.style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è Frame
        self.style.configure('Dark.TFrame', 
                           background=self.colors['bg'],
                           borderwidth=0)
        
        self.style.configure('Card.TFrame',
                           background=self.colors['secondary_bg'],
                           relief='flat',
                           borderwidth=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è Label
        self.style.configure('Dark.TLabel',
                           background=self.colors['bg'],
                           foreground=self.colors['text'],
                           font=('Segoe UI', 10))
        
        self.style.configure('Card.TLabel',
                           background=self.colors['secondary_bg'],
                           foreground=self.colors['text'],
                           font=('Segoe UI', 10))
        
        self.style.configure('Title.TLabel',
                           background=self.colors['bg'],
                           foreground=self.colors['text'],
                           font=('Segoe UI', 12, 'bold'))
        
        self.style.configure('Status.TLabel',
                           background=self.colors['bg'],
                           foreground=self.colors['text_secondary'],
                           font=('Segoe UI', 9))
        
        self.style.configure('Files.TLabel',
                           background=self.colors['bg'],
                           foreground=self.colors['text_secondary'],

                           font=('Segoe UI', 8))  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 9 –¥–æ 8
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        # –û—Å–Ω–æ–≤–Ω–∞—è –∞–∫—Ü–µ–Ω—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è)
        self.style.configure('Accent.TButton',
                           background=self.colors['accent'],
                           foreground='white',
                           borderwidth=0,
                           focuscolor='none',
                           font=('Segoe UI', 10, 'bold'),
                           padding=(20, 12))
        
        self.style.map('Accent.TButton',
                      background=[('active', self.colors['accent_hover']),
                                ('pressed', self.colors['accent'])])
        



        # –ì–æ–ª—É–±–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è merge
        self.style.configure('Blue.TButton',
                           background='#0ea5e9',  # –ì–æ–ª—É–±–æ–π
                           foreground='white',
                           borderwidth=0,
                           focuscolor='none',
                           font=('Segoe UI', 10, 'bold'),
                           padding=(15, 10))
        



        self.style.map('Blue.TButton',
                      background=[('active', '#38bdf8'),  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                                ('pressed', '#0ea5e9')])
        



        # –°–µ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è change selection
        self.style.configure('Gray.TButton',
                           background='#6b7280',  # –°–µ—Ä—ã–π
                           foreground='white',
                           borderwidth=0,
                           focuscolor='none',
                           font=('Segoe UI', 10, 'bold'),
                           padding=(20, 12))
        



        self.style.map('Gray.TButton',
                      background=[('active', '#9ca3af'),  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                                ('pressed', '#6b7280')])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è Entry
        self.style.configure('Dark.TEntry',
                           fieldbackground=self.colors['secondary_bg'],
                           background=self.colors['secondary_bg'],
                           foreground=self.colors['text'],
                           bordercolor=self.colors['border'],
                           insertcolor=self.colors['text'],
                           font=('Segoe UI', 10),
                           padding=8)
        
        self.style.map('Dark.TEntry',
                      bordercolor=[('focus', self.colors['accent'])])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è Progressbar
        self.style.configure('Dark.Horizontal.TProgressbar',
                           background='#0ea5e9',  # –ì–æ–ª—É–±–æ–π —Ü–≤–µ—Ç –∫–∞–∫ —É –∫–Ω–æ–ø–∫–∏ merge
                           troughcolor=self.colors['secondary_bg'],
                           borderwidth=0,
                           lightcolor='#0ea5e9',  # –ì–æ–ª—É–±–æ–π —Ü–≤–µ—Ç
                           darkcolor='#0ea5e9')   # –ì–æ–ª—É–±–æ–π —Ü–≤–µ—Ç)
        
    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        main_container = ttk.Frame(self.window, style='Dark.TFrame')
        main_container.grid(row=0, column=0, sticky='nsew', padx=20, pady=10)
        main_container.grid_columnconfigure(0, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_container, text="üéµ Audio Merger", style='Title.TLabel')
        title_label.grid(row=0, column=0, pady=(0, 10))
        

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ (—Ç–µ–ø–µ—Ä—å —Å–µ—Ä–∞—è)
        self.select_btn = ttk.Button(main_container, text="üìÅ Change Selection", 

                                   command=self.select_files, style='Gray.TButton')
        self.select_btn.grid(row=1, column=0, pady=(0, 6), sticky='ew')
        


        # –õ–µ–π–±–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ —Å–ª–æ–≤–∞–º
        self.files_label = ttk.Label(main_container, text="", style='Files.TLabel', 
                                   wraplength=350, justify='left')
        self.files_label.grid(row=2, column=0, pady=(0, 8), sticky='ew')
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–≤–æ–¥–∞
        self.output_card = ttk.Frame(main_container, style='Card.TFrame')
        self.output_card.grid(row=3, column=0, sticky='ew', pady=(0, 8))
        self.output_card.grid_columnconfigure(1, weight=1)
        
        filename_label = ttk.Label(self.output_card, text="Filename:", style='Card.TLabel')
        filename_label.grid(row=0, column=0, padx=15, pady=(10, 10), sticky='w')
        
        self.filename_entry = ttk.Entry(self.output_card, style='Dark.TEntry')
        self.filename_entry.grid(row=0, column=1, sticky='ew', padx=(10, 15), pady=(10, 10))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å
        self.progress_frame = ttk.Frame(main_container, style='Dark.TFrame')
        self.progress_frame.grid(row=4, column=0, sticky='ew', pady=(0, 8))
        self.progress_frame.grid_columnconfigure(0, weight=1)
        self.progress_frame.grid_remove()
        
        self.progress = ttk.Progressbar(self.progress_frame, mode='determinate', style='Dark.Horizontal.TProgressbar')
        self.progress.grid(row=0, column=0, sticky='ew', pady=(0, 4))
        
        self.status_label = ttk.Label(self.progress_frame, text="", style='Status.TLabel')
        self.status_label.grid(row=1, column=0)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        self.merge_frame = ttk.Frame(main_container, style='Dark.TFrame')
        self.merge_frame.grid(row=5, column=0, sticky='ew')
        self.merge_frame.grid_columnconfigure(0, weight=1)
        
        self.merge_btn = ttk.Button(self.merge_frame, text="üîó Merge Audio Files", 
                                  command=self.merge_files, style='Blue.TButton')
        self.merge_btn.grid(row=0, column=0, sticky='ew')
        
        # Bind window resize event
        self.window.bind('<Configure>', self.on_window_resize)
        
        self.interface_created = True

    def update_min_size(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        self.window.update_idletasks()
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        req_width = self.window.winfo_reqwidth()
        req_height = self.window.winfo_reqheight()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–∏–π –∑–∞–ø–∞—Å –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        min_width = max(500, req_width + 80)  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å 450 –Ω–∞ 500
        min_height = max(240, req_height + 40)
        
        self.window.minsize(min_width, min_height)

    def on_window_resize(self, event):
        # Update label wraplength when window is resized
        if hasattr(self, 'files_label') and event.widget == self.window:
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å –º–∏–Ω–∏–º—É–º–æ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–ª–æ–≤
            new_width = max(300, event.width - 80)
            self.files_label.configure(wraplength=new_width)

    def update_status(self, message, progress_value):
        self.status_label.config(text=message)
        self.progress['value'] = progress_value
        self.window.update()
        
    def select_files(self):
        logging.info("Opening file selection dialog")
        try:
            files = filedialog.askopenfilenames(
                filetypes=[("Audio Files", "*.mp3 *.wav *.flac *.aac *.ogg")],
                title="Select Audio Files"
            )
            if files:
                logging.info(f"Selected {len(files)} files")
                def natural_keys(text):
                    import re
                    def atoi(text):
                        return int(text) if text.isdigit() else text
                    return [atoi(c) for c in re.split(r'(\d+)', os.path.basename(text))]
                
                self.selected_files = sorted(files, key=natural_keys)
                self.output_path = os.path.dirname(self.selected_files[0])
                logging.debug(f"Output path set to: {self.output_path}")
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                files_string = ", ".join([os.path.basename(f) for f in self.selected_files])
                logging.info(f"Selected files: {files_string}")
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
                if not self.interface_created:
                    self.create_widgets()
                    self.window.deiconify()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
                
                self.update_ui_after_selection()
            else:
                logging.info("No files selected")
                # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                if not self.interface_created:
                    self.window.quit()
        except Exception as e:
            logging.error(f"Error in file selection: {str(e)}")
            logging.error(traceback.format_exc())
            if self.interface_created:
                messagebox.showerror("Error", f"Error selecting files: {str(e)}")
            else:
                self.window.quit()

    def update_ui_after_selection(self):
        # Show/hide appropriate elements
        if self.selected_files:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—É—Ç–µ–º –∫ –ø–∞–ø–∫–µ
            files_count = len(self.selected_files)
            files_names = [f"[{os.path.basename(f)}]" for f in self.selected_files]
            folder_path = os.path.dirname(self.selected_files[0])
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Selected X files: [—Å–ø–∏—Å–æ–∫] from –ø—É—Ç—å
            files_text = f"Selected {files_count} files: {', '.join(files_names)} from {folder_path}"
            self.files_label.config(text=files_text)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.window.after(50, self.update_min_size)

    def merge_files(self):
        if not self.selected_files:
            logging.warning("Attempted to merge with no files selected")
            self.show_completion_message("‚ö†Ô∏è Please select files first!", is_error=True)
            return
        
        logging.info("Starting file merge process")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        self.merge_frame.grid_remove()
        self.progress_frame.grid()
        self.progress['value'] = 0
        
        # –û—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.select_btn.config(state='disabled')
        
        try:
            output_filename = self.filename_entry.get().strip()
            if not output_filename:
                output_filename = "merged_audio"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
                
            logging.info(f"Output filename: {output_filename}")
            
            self.update_status("üîÑ Preparing to merge...", 10)
            output_format = os.path.splitext(self.selected_files[0])[1]
            output_path = os.path.join(self.output_path, f"{output_filename}{output_format}")
            logging.debug(f"Full output path: {output_path}")
            
            self.update_status("üìù Creating output file...", 20)
            with open(output_path, 'wb') as outfile:
                file_count = len(self.selected_files)
                progress_per_file = 60 / file_count
                
                for i, file in enumerate(self.selected_files, 1):
                    current_file = os.path.basename(file)
                    logging.info(f"Processing file {i}/{file_count}: {current_file}")
                    self.update_status(f"üéµ Processing {i}/{file_count}: {current_file}", 
                                     20 + (i * progress_per_file))
                    
                    with open(file, 'rb') as infile:
                        outfile.write(infile.read())
            
            logging.info("Merge completed successfully")
            self.update_status("Merge complete!", 100)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –≤–º–µ—Å—Ç–æ popup
            self.show_completion_message(f"‚úÖ Files merged successfully!\nSaved as: {os.path.basename(output_path)}\nLocation: {os.path.dirname(output_path)}")
            
        except Exception as e:
            logging.error("Error during merge process:")
            logging.error(traceback.format_exc())
            self.show_completion_message(f"‚ùå An error occurred: {str(e)}", is_error=True)
        finally:
            # –í–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
            self.select_btn.config(state='normal')
        
        self.progress_frame.grid_remove()
        self.merge_frame.grid()

    def show_completion_message(self, message, is_error=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
        self.progress_frame.grid_remove()
        
        # –°–æ–∑–¥–∞—Ç—å —Ñ—Ä–µ–π–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if not hasattr(self, 'completion_frame'):
            self.completion_frame = ttk.Frame(self.merge_frame.master, style='Dark.TFrame')
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Ñ—Ä–µ–π–º
        for widget in self.completion_frame.winfo_children():
            widget.destroy()
        
        # –°–æ–∑–¥–∞—Ç—å –ª–µ–π–±–ª —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        completion_style = 'Dark.TLabel'
        if is_error:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –æ—à–∏–±–æ–∫
            completion_style = 'Dark.TLabel'
        
        completion_label = ttk.Label(self.completion_frame, text=message, 
                                   style=completion_style, justify='center',
                                   font=('Segoe UI', 10))
        completion_label.grid(row=0, column=0, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        new_merge_btn = ttk.Button(self.completion_frame, text="üîó Merge Again", 
                                 command=self.reset_for_new_merge, style='Blue.TButton')
        new_merge_btn.grid(row=1, column=0, sticky='ew')
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä–µ–π–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.completion_frame.grid(row=5, column=0, sticky='ew')
        self.completion_frame.grid_columnconfigure(0, weight=1)

    def reset_for_new_merge(self):
        """–°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
        # –°–∫—Ä—ã—Ç—å —Ñ—Ä–µ–π–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if hasattr(self, 'completion_frame'):
            self.completion_frame.grid_remove()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –∫–Ω–æ–ø–∫—É merge
        self.merge_frame.grid()

if __name__ == "__main__":
    logging.info("Starting application")
    try:
        app = AudioMerger()
        app.window.mainloop()
    except Exception as e:
        logging.critical("Application crashed:")
        logging.critical(traceback.format_exc())